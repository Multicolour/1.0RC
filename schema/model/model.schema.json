{
  "title": "Multicolour Model",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "required": [
    "attributes"
  ],
  "additionalProperties": true,
  "properties": {
    "attributes": {
      "type": "object",
      "title": "Model attributes",
      "description": "The attributes to declare for this model, including types and any extra config.",
      "$id": "attributes",
      "additionalProperties": true,
      "patternProperties": {
        "^([a-zA-Z0-9-_]+)+$": {
          "type": "object",
          "$id": "model/attributes/attribute",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "$id": "model/attributes/attribute/definition",
              "description": "The type of column to define.",
              "enum": [
                "integer",
                "bigInteger",
                "text",
                "string",
                "float",
                "decimal",
                "boolean",
                "date",
                "dateTime",
                "time",
                "timestamp",
                "timestamps",
                "binary",
                "json",
                "jsonb",
                "uuid",
                "foreign"
              ]
            },
            "^(model|collection)$": {
              "type": "string",
              "$id": "model/attributes/attribute/related/model",
              "description": "A related model on this key. Will be set up as a foreign key"
            },
            "required": {
              "type": "boolean",
              "$id": "model/attributes/attribute/required",
              "description": "Whether or not this field is a NON-NULL and required property during validation."
            }
          }
        }
      }
    },
    "toJSON": {
      "title": "Model toJSON",
      "$id": "model/attributes/toJSON",
      "instanceof": "Function",
      "description": "async toJSON() {} A callback function to be called before returning the row. A chance to update the data from the database and to remove sensitive keys."
    }
  },
  "beforeWrite": {
    "title": "beforeCreate callback",
    "$id": "model/beforeCreate",
    "instanceof": "Function",
    "description": "async beforeCreate(row: Object). An async function to alter properties before they're written to the target table."
  },
  "afterWrite": {
    "title": "afterCreate callback",
    "$id": "model/afterCreate",
    "instanceof": "Function",
    "description": "async afterCreate(row: Object). An async function to perform work triggered by newly created rows."
  }
}
